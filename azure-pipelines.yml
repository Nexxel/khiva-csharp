variables:
- group: khiva-csharp-VG
- name: codecov_t
  value: $(CODECOV_TOKEN)

jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - checkout: self
        clean: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
        displayName: "Use Python 3.7"
      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.7.2'
        inputs:
          versionSpec: '4.7.2'
      - task: NuGetCommand@2
        displayName: "Nuget restore Khiva.sln"
        inputs:
          command: 'restore'
          solution: 'Khiva.sln'
          verbosityRestore: 'Quiet'
      - script: |
          source .CI/azure-pipelines/install-arrayfire.sh
          source .CI/azure-pipelines/install-khiva.sh
        displayName: "Install ArrayFire and Khiva"
      - script: source .CI/azure-pipelines/build_and_test_mono.sh
        displayName: "Build and test"
      - script: bash <(curl -s https://codecov.io/bash) -t $(codecov_t)
        condition: succeeded()
        displayName: "Codecov"
      - task: PublishTestResults@2
        inputs:
          testRunner: 'NUnit'
          testResultsFiles: '**/TestResult.xml'
          testRunTitle: 'Test results'
          platform: 'x64'
          configuration: 'Debug'
          displayName: "Publish test results"
          condition: succeeded()

  - job: macOS
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: self
        clean: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
        displayName: "Use Python 3.7"
      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.7.2'
        inputs:
          versionSpec: '4.7.2'
      - script: |
          source .CI/azure-pipelines/install-arrayfire.sh
          source .CI/azure-pipelines/install-khiva.sh
        displayName: "Install ArrayFire and Khiva"
      - script: source .CI/azure-pipelines/build_and_test_mono.sh
        displayName: "Build and test"
      - script: bash <(curl -s https://codecov.io/bash) -t $(codecov_t)
        condition: succeeded()
        displayName: "Codecov"
      - task: PublishTestResults@2
        inputs:
          testRunner: 'NUnit'
          testResultsFiles: '**/TestResult.xml'
          testRunTitle: 'Test results'
          platform: 'x64'
          configuration: 'Debug'
          displayName: "Publish test results"
          condition: succeeded()

  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - checkout: self
        clean: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
        displayName: "Use Python 3.7"
      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.7.2'
        inputs:
          versionSpec: '4.7.2'
      - script: pip install conan -I
        displayName: "Install conan"
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'if(!(Test-Path -Path "C:/Program Files/ArrayFire" )){wget https://www.dropbox.com/s/13wnbd1qynjmw0i/ArrayFire-v3.6.2.zip?dl=1 -O ArrayFire-v3.6.2.zip }'
        displayName: "Download ArrayFire"
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'if(!(Test-Path -Path "C:/Program Files/ArrayFire" )){ 7z x ArrayFire-v3.6.2.zip -o"C:/Program Files" }'
        displayName: "Extract ArrayFire zip"
      - script: ls "C:/Program Files"
      - script: ls "C:/Program Files/Boost"
      - script: reg add HKCU\Software\Kitware\CMake\Packages\ArrayFire /v ArrayFire_CMake_DIR /d "C:/Program Files/ArrayFire/v3/cmake" /f
        displayName: "Reg add"
      - script: vcpkg install --triplet x64-windows gtest eigen3
        displayName: "Download ArrayFire dependencies"
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'ls .'
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'if ($env:INSTALL_KHIVA_METHOD -eq "installer"){
            if(!(Test-Path -Path "C:/Program Files/Khiva" )){ wget https://github.com/shapelets/khiva/releases/download/v0.2.2/khiva-v0.2.2-unattended.exe -O khiva-v0.2.2-unattended.exe};
            if(!(Test-Path -Path "C:/Program Files/Khiva" )){ ./khiva-v0.2.2-unattended.exe /S };
          }else{
            git clone -q https://github.com/shapelets/khiva.git C:/khiva-library ;
            cd C:/khiva-library;
            mkdir build;
            cd build;
            conan install .. --build=missing
            cmake .. -G"$env:GENERATOR";
            cmake --build . --config Release -- /m;
          }'
        env: 
          GENERATOR: "Visual Studio 15 2017 Win64"
        displayName: "Install khiva"
      - script: |
          cd c:/projects/khiva-csharp
          choco install Codecov
        displayName: "Install codecov"
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
        displayName: "Use Python 3.7"
      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.7.2'
        inputs:
          versionSpec: '4.7.2'
      - task: VSBuild@1
        inputs:
          solution: 'Khiva.sln'
          platform: 'x64'
          configuration: 'Debug'
          maximumCpuCount: true
          restoreNugetPackages: true
          msbuildArchitecture: 'x64'
        displayName: "Build solution Khiva.sln"
      - task: VSTest@2
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: '**/*Tests*.dll
!**/obj/**'
          codeCoverageEnabled: true
          platform: 'x64'
          configuration: 'Debug'
        displayName: "Run tests"
      - script: codecov -f coverage.xml -t $(codecov_t)
        condition: succeeded()
        displayName: "Codecov" 
      - task: PublishTestResults@2
        inputs:
          testRunner: 'NUnit'
          testResultsFiles: '**/TestResult.xml'
          testRunTitle: 'Test results'
          platform: 'x64'
          configuration: 'Debug'
          displayName: "Publish test results"